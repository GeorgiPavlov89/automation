# automation/io/excel_reader.py
from __future__ import annotations
r"""
–ß–µ—Ç–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞ Excel —Å ‚Äû–¥–µ–ª–∞‚Äú. –ê–∫–æ –Ω–µ –ø–æ–¥–∞–¥–µ—à –ø—ä—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —â–µ –≤–∑–µ–º–µ:
  <Desktop>\–†–æ–±–æ—Ç-–î–µ–ª–∞\Reports_Order.xlsx   (–∏–ª–∏ .xls)

–ü–æ–∫—Ä–∏–≤–∞:
- OneDrive Desktop (Known Folder Move);
- –ø—Ä–µ–Ω–∞—Å–æ—á–µ–Ω Desktop –Ω–∞ –¥—Ä—É–≥ –¥–∏—Å–∫ (—á–µ—Ç–µ HKCU\...\User Shell Folders\Desktop).

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    pip install pandas openpyxl xlrd
(–ó–∞ .xlsx/.xlsm –µ –Ω—É–∂–µ–Ω openpyxl; –∑–∞ .xls –µ –Ω—É–∂–µ–Ω xlrd.)
"""

import os
import re
import datetime as dt
from pathlib import Path
from typing import List, Dict
import pandas as pd

# ---------- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ Desktop ----------

def _desktop_from_onedrive() -> Path | None:
    od = os.environ.get("OneDrive")
    if od:
        p = Path(od) / "Desktop"
        if p.exists():
            return p
    return None

def _desktop_from_registry() -> Path | None:
    r"""–ß–µ—Ç–µ HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders\Desktop."""
    try:
        import winreg
        with winreg.OpenKey(
            winreg.HKEY_CURRENT_USER,
            r"Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"
        ) as key:
            value, _typ = winreg.QueryValueEx(key, "Desktop")
            expanded = os.path.expandvars(value)  # %USERPROFILE% / %OneDrive%
            p = Path(expanded)
            if p.exists():
                return p
    except Exception:
        pass
    return None

def _desktop_from_userprofile() -> Path:
    up = os.environ.get("USERPROFILE") or str(Path.home())
    p = Path(up) / "Desktop"
    return p if p.exists() else Path.home() / "Desktop"

def get_desktop_dir() -> Path:
    """–í—Ä—ä—â–∞ —Ä–µ–∞–ª–Ω–∏—è Desktop, –¥–æ—Ä–∏ –¥–∞ –µ –ø—Ä–µ–Ω–∞—Å–æ—á–µ–Ω (OneDrive/Registry)."""
    return (
        _desktop_from_onedrive()
        or _desktop_from_registry()
        or _desktop_from_userprofile()
    )

def resolve_cases_path(
    folder_name: str = "–†–æ–±–æ—Ç-–î–µ–ª–∞",
    base_name: str = "Reports_Order"
) -> Path:
    """
    –¢—ä—Ä—Å–∏ –≤—ä–≤ <Desktop>\<folder_name>\:
      - Reports_Order.xlsx, –ø–æ—Å–ª–µ Reports_Order.xls.
    –ê–∫–æ –ª–∏–ø—Å–≤–∞, –≤—Ä—ä—â–∞ –æ—á–∞–∫–≤–∞–Ω–æ—Ç–æ –º—è—Å—Ç–æ –∑–∞ .xlsx –∏ —Å—ä–∑–¥–∞–≤–∞ –ø–∞–ø–∫–∞—Ç–∞.
    """
    desktop = get_desktop_dir()
    print(f"[excel_reader] –û—Ç–∫—Ä–∏—Ç Desktop: {desktop}")
    root = desktop / folder_name
    root.mkdir(parents=True, exist_ok=True)

    candidates = [
        root / f"{base_name}.xlsx",
        root / f"{base_name}.xls",
    ]
    for c in candidates:
        if c.exists():
            return c
    return candidates[0]  # –æ—á–∞–∫–≤–∞–Ω–æ –º—è—Å—Ç–æ, –∞–∫–æ —Ñ–∞–π–ª—ä—Ç –æ—â–µ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞

# ---------- –ú–∞–ø –∫—ä–º –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∫–ª—é—á–æ–≤–µ ----------

MAP = {
    "EGN-EIK": "egn_or_eik",
    "No_ID": "case_no",
    "NSSI_Assur": "do_noi_assur",
    "Regix-NOI_Trud": "do_regix_noi_trud",
    "Regix-NOI_Pens": "do_regix_noi_pens",
    "GRAO": "do_grao",
    "BNB": "do_bnb",
    "IKAR": "do_ikar",
    "NAP_art74": "do_nap_art74",
    "NAP_art191": "do_nap_art191",
    "DVIJEMI": "do_dvijemi",
    "BEZ_ZAPORI": "do_bez_zapori",
}
FLAGS: List[str] = [v for v in MAP.values() if v.startswith("do_")]
TEXT_TRUE = {"1", "1.0", "–¥–∞", "–¥", "yes", "y", "true", "t", "‚úì", "x"}

# ---------- –ï–ì–ù –≤–∞–ª–∏–¥–∞—Ç–æ—Ä (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω) ----------

_W = [2,4,8,5,10,9,7,3,6]

def _egn_date_ok(s: str) -> bool:
    yy, mm, dd = int(s[0:2]), int(s[2:4]), int(s[4:6])
    if 1 <= mm <= 12:
        century, real_m = 1900, mm
    elif 21 <= mm <= 32:  # 1800‚Äì1899
        century, real_m = 1800, mm - 20
    elif 41 <= mm <= 52:  # 2000‚Äì2099
        century, real_m = 2000, mm - 40
    else:
        return False
    Y = century + yy
    try:
        dt.date(Y, real_m, dd)
        return True
    except ValueError:
        return False

def is_valid_egn(s: str) -> bool:
    s = re.sub(r"\D", "", str(s or ""))
    if not re.fullmatch(r"\d{10}", s): return False
    if not _egn_date_ok(s): return False
    chk = sum(int(s[i]) * _W[i] for i in range(9)) % 11
    if chk == 10: chk = 0
    return chk == int(s[9])

def classify_id(value: str) -> str:
    t = re.sub(r"\D", "", str(value or ""))
    if len(t) == 10:
        return "EGN" if is_valid_egn(t) else "EGN_10_INVALID"
    if len(t) == 9:  return "EIK9"
    if len(t) == 13: return "EIK13"
    return "UNKNOWN"

# ---------- –û—Å–Ω–æ–≤–Ω–æ —á–µ—Ç–µ–Ω–µ ----------

def read_cases(path: str | None = None) -> List[Dict]:
    """
    –ê–∫–æ path –µ None, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ <Desktop>\–†–æ–±–æ—Ç-–î–µ–ª–∞\Reports_Order.xlsx|xls.
    –í—Ä—ä—â–∞ —Å–ø–∏—Å—ä–∫ –æ—Ç dict –∑–∞–ø–∏—Å–∏ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∫–ª—é—á–æ–≤–µ –∏ —Ñ–ª–∞–≥–æ–≤–µ 0/1.
    """
    p = Path(path) if path else resolve_cases_path()
    if not p.exists():
        raise FileNotFoundError(
            f"–ù–µ –Ω–∞–º–∏—Ä–∞–º –≤—Ö–æ–¥–Ω–∏—è —Ñ–∞–π–ª. –û—á–∞–∫–≤–∞–º –≥–æ —Ç—É–∫:\n  {p}\n"
            f"–°–ª–æ–∂–∏ —Ç–∞–º Reports_Order.xlsx (–∏–ª–∏ .xls). –ü–∞–ø–∫–∞—Ç–∞ –µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞."
        )

    # –ò–∑–±–æ—Ä –Ω–∞ engine –ø–æ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ
    ext = p.suffix.lower()
    engine = "xlrd" if ext == ".xls" else ("openpyxl" if ext in (".xlsx", ".xlsm") else None)

    print(f"[excel_reader] –ß–µ—Ç–∞: {p} (engine={engine})")
    df = pd.read_excel(p, engine=engine)
    print(f"[excel_reader] –ö–æ–ª–æ–Ω–∏ (–∏–∑—Ç–æ—á–Ω–∏–∫): {list(df.columns)}")

    # –ü–æ—á–∏—Å—Ç–∏ –∑–∞–≥–ª–∞–≤–∏—è—Ç–∞ –∏ –º–∞–ø–Ω–∏ –∫—ä–º –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∏–º–µ–Ω–∞
    df = df.rename(columns=lambda c: str(c).strip())
    df = df.rename(columns={c: MAP.get(c, c) for c in df.columns})
    print(f"[excel_reader] –ö–æ–ª–æ–Ω–∏ (–Ω–æ—Ä–º.): {list(df.columns)}")

    # –£–≤–µ—Ä–∏ —Å–µ, —á–µ –≤—Å–∏—á–∫–∏ —Ñ–ª–∞–≥-–∫–æ–ª–æ–Ω–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç
    for f in FLAGS:
        if f not in df.columns:
            df[f] = 0

    # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–π —Ñ–ª–∞–≥–æ–≤–µ—Ç–µ: —Ç–µ–∫—Å—Ç–æ–≤–∏ ‚Äû–∏—Å—Ç–∏–Ω–∏‚Äú ‚Üí 1, –ø–æ—Å–ª–µ –∫—ä–º int
    for f in FLAGS:
        df[f] = df[f].apply(lambda v: 1 if str(v).strip().lower() in TEXT_TRUE else v)
    df[FLAGS] = df[FLAGS].apply(pd.to_numeric, errors="coerce").fillna(0).astype(int)

    # –ö–ª–∞—Å–∏—Ñ–∏–∫–∞—Ü–∏—è/–≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (—Å–∞–º–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)
    df["id_kind"] = df["egn_or_eik"].map(classify_id)
    bad_rows = df.index[df["id_kind"] == "EGN_10_INVALID"]
    if len(bad_rows):
        rows = [int(i) + 2 for i in bad_rows.to_list()]  # +2 –∑–∞ header + 1-index
        print("‚ö† –ï–ì–ù –ø—Ä–æ–≤–µ—Ä–∫–∞ (10-—Ü–∏—Ñ—Ä–µ–Ω–∏, –Ω–æ —Å –≥—Ä–µ—à–∫–∞) –≤ —Ä–µ–¥–æ–≤–µ:", rows)

    return df.fillna("").to_dict(orient="records")

# ---------- CLI ----------

if __name__ == "__main__":
    import argparse
    from pprint import pprint
    import sys, traceback

    ap = argparse.ArgumentParser(
        description="–ü—Ä–æ—á–µ—Ç–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–π Excel —Å –¥–µ–ª–∞",
        epilog=r"–ê–∫–æ –Ω–µ –ø–æ–¥–∞–¥–µ—à –ø—ä—Ç, —â–µ —Å–µ –ø–æ–ª–∑–≤–∞ <Desktop>\–†–æ–±–æ—Ç-–î–µ–ª–∞\Reports_Order.*"
    )
    ap.add_argument("path", nargs="?", help=r"(–ø–æ –∂–µ–ª–∞–Ω–∏–µ) –ø—ä—Ç –¥–æ .xls/.xlsx")
    ap.add_argument("--out", default=None, help="(–ø–æ –∂–µ–ª–∞–Ω–∏–µ) –∑–∞–ø–∏—à–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –≤ .xlsx")
    args = ap.parse_args()

    try:
        records = read_cases(args.path)
        print(f"\n‚úÖ –ü—Ä–æ—á–µ—Ç–µ–Ω–∏ —Ä–µ–¥–æ–≤–µ: {len(records)}")
        for i, rec in enumerate(records, 1):
            print(f"\n--- –†–µ–¥ {i} ---")
            pprint(rec, sort_dicts=False)

        if args.out:
            pd.DataFrame(records).to_excel(args.out, index=False)
            print(f"\nüíæ –ó–∞–ø–∏—Å–∞–Ω–æ –≤: {args.out}")

    except Exception as e:
        print("‚ùå –ì—Ä–µ—à–∫–∞:", e)
        traceback.print_exc()
        sys.exit(1)
